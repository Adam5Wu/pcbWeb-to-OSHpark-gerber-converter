import os
instructions = \
"""
This scipt will change the fielnames of the gerber files generated by pcbWeb
into files that can be correctly interpreted by the OSHPark batch pcb service.
Note that this script will only work for two layer boards. Also note that the
script currently ignores the non plated holes file generated by pcbWeb. 

To use this script, first save your pcbWeb project as a gerber file. Unzip
your gerber file, tell the script where to find it, and you should be good to
go.
"""
print instructions
print ""

def genProperNameDict(bName):
    return {'Top layer': '%s.GTL' % bName,
            'Bottom layer': '%s.GBL' % bName,
            'Top silkscreen': '%s.GTO' % bName,
            'Bottom silkscreen': '%s.GBO' % bName,
            'Top soldermask': '%s.GTS' % bName,
            'Bottom soldermask': '%s.GBS' % bName,
            'Board outline': '%s.GKO' % bName,
            'Plated holes Excellon file': '%s.XLN' % bName}
    
boardName = raw_input('enter board name ')
pathToFile = raw_input('enter the path to the gerber folder ')

if not os.path.exists(pathToFile):
    raise ValueError("invalid file path")
    
correctMapping = genProperNameDict(boardName)
currentMapping = {}
with open(os.path.join(pathToFile, 'README.txt'), 'r') as rmf:
    for line in rmf:
        contents = line.split('=')
        currentMapping[contents[1].strip()] = contents[0].strip()
        
allFiles = os.listdir(pathToFile)
for key in currentMapping.keys():
    if key in correctMapping.keys() and currentMapping[key] in allFiles:
        # rename the file
        oldName = os.path.join(pathToFile, currentMapping[key])
        newName = os.path.join(pathToFile, correctMapping[key])
        os.rename(oldName, newName)
    else:
        print 'file %s cannot be converted' % key

    
    